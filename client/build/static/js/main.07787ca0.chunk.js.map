{"version":3,"sources":["images/WSU-logo.png","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","AppMode.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","path","to","id","onClick","props","toggleMenuOpen","this","menuOpen","src","require","alt","height","width","exact","React","Component","SideMenu","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","makeModeButton","mode","activeClassName","prettyName","buttons","modes","map","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","changeMode","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","courseId","courseName","preReqs","description","keys","colSpan","RoundForm","newSec","newSGS","computeSGS","strokes","minutes","seconds","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","Number","today","Date","now","getTimezoneOffset","date","toISOString","substr","course","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","App","newMode","handleChangeMode","openMenu","closeMenu","prevState","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","authenticated","showAboutDialog","then","isAuthenticated","user","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07787ca0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WSU-logo.d4057e66.png\";","import React from 'react';\nimport {Link, Switch, Route} from \"react-router-dom\";\n\nclass NavBar extends React.Component {\n    render() {\n        return (\n            <div className=\"navbar\">\n                <span className=\"navbar-items\">\n                    <Switch>\n\n                        <Route path={[\"/rounds/add\", \"/rounds/edit\"]}>\n                            <Link to=\"/rounds\" className=\"sidemenu-btn\">\n                                <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon fa fa-arrow-left\"}/>\n                            </Link>\n                        </Route>\n                        <Route path=\"/login\"/>\n                        <Route path=\"/\">\n                            <button className=\"sidemenu-btn\" onClick={() => this.props.toggleMenuOpen()}>\n                                <span\n                                    id=\"menuBtnIcon\"\n                                    className={`sidemenu-btn-icon fa ${this.props.menuOpen ? \"fa-times\" : \"fa-bars\"}`}\n                                />\n                            </button>\n                        </Route>\n\n                    </Switch>\n                    <img src={require('../images/WSU-logo.png')} alt=\"WSU Logo\" height=\"38px\" width=\"38px\"/>\n                    <span className=\"navbar-title\">\n                        <Switch>\n\n                            <Route path=\"/login\">\n                                EECS Course Scheduler\n                            </Route>\n                            <Route path=\"/feed\">\n                                Activity Feed\n                            </Route>\n                            <Route path=\"/rounds/add\">\n                                Log New Round\n                            </Route>\n                            <Route path=\"/rounds/edit\">\n                                Edit Round\n                            </Route>\n                            <Route exact path=\"/rounds\">\n                                My Rounds\n                            </Route>\n                            <Route path=\"/courses\">\n                                Courses\n                            </Route>\n\n                        </Switch>\n                    </span>\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport {Switch, Route} from \"react-router-dom\";\n\nclass SideMenu extends React.Component {\n    render() {\n        return (\n            <div className={`sidemenu ${this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\"}`}\n                 onClick={this.props.toggleMenuOpen}>\n                <div className=\"sidemenu-title\">\n                    <img src={this.props.profilePicURL} height='60' width='60'/>\n                    <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\n                </div>\n\n                <Switch>\n                    <Route path=\"/feed\">\n                        <div>\n                            <a className=\"sidemenu-item\">\n                                <span className=\"fa fa-users\"/>\n                                &nbsp;Followed Users\n                            </a>\n                            <a className=\"sidemenu-item \">\n                                <span className=\"fa fa-search\"/>\n                                &nbsp;Search Feed\n                            </a>\n                        </div>\n                    </Route>\n                    <Route path=\"/rounds\">\n                        <div>\n                            <a className=\"sidemenu-item\">\n                                <span className=\"fa fa-plus\"/>\n                                &nbsp;Log New Round\n                            </a>\n                            <a className=\"sidemenu-item\">\n                                <span className=\"fa fa-search\"/>\n                                &nbsp;Search Rounds\n                            </a>\n                        </div>\n                    </Route>\n                    <Route path=\"/courses\">\n                        <div>\n                            <a className=\"sidemenu-item\">\n                                <span className=\"fa fa-plus\"/>\n                                &nbsp;Add a Course\n                            </a>\n                            <a className=\"sidemenu-item\">\n                                <span className=\"fa fa-search\"/>\n                                &nbsp;Search Courses\n                            </a>\n                        </div>\n                    </Route>\n                </Switch>\n                {this.props.localAccount\n                    ? <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\n                        <span className=\"fa fa-user\"></span>&nbsp;Account\n                    </a>\n                    : null}\n                <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\n                    <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\n                <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\n                    <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\n            </div>\n        );\n    }\n}\n\nexport default SideMenu;\n","import React from 'react';\nimport {NavLink, Switch, Route} from \"react-router-dom\";\n\n\nclass ModeBar extends React.Component {\n\n    makeModeButton = (mode) => {\n        return (\n            <NavLink to={mode.path} activeClassName=\"item-selected\">\n                <span className=\"modebar-text\">\n                    {mode.prettyName}\n                </span>\n            </NavLink>\n        )\n    }\n\n    render() {\n        const modes = this.props.modes;\n        const buttons = modes.map(this.makeModeButton);\n        return (\n            <Switch>\n                <Route path=\"/login\" />\n                <Route path=\"/\">\n                    <div className={\"modebar visible\" + (this.props.menuOpen ? \" ignore-click\" : \"\")}>\n                        {buttons}\n                    </div>\n                </Route>\n            </Switch>\n        );\n    }\n}\n\nexport default ModeBar;\n","import React from 'react';\n\nclass ConfirmDeleteAccount extends React.Component {\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {emailMatches: false};\n    }\n    \n    componentDidMount() {\n        this.emailRef.current.focus();\n    }\n\n    handleChange = () => {\n        const match = (this.emailRef.current.value === this.props.email);\n        if (match != this.state.emailMatches) {\n            this.setState({emailMatches: match});\n        }\n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete your account? <br />\n                 <i>This action cannot be undone.</i></p>\n              <label>\n                Confirm Email ({this.props.email}):\n                <br/>\n                <input \n                    className=\"form-center\"\n                    type=\"text\"\n                    ref={this.emailRef}\n                    onChange={this.handleChange} />\n                </label>\n                <br />\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\n                  Yes, Delete My Account</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteAccount;","import React from 'react';\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\n\nclass CreateEditAccountDialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.origAccountInfo = null;\n        //Create a ref for the email input DOM element\n        this.newUserRef = React.createRef();\n        this.repeatPassRef = React.createRef();\n        this.profilePicRef = React.createRef();\n        this.state = {accountName: \"\",\n                      displayName: \"\",\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                      password: \"\",\n                      passwordRepeat: \"\",\n                      securityQuestion: \"\",\n                      securityAnswer: \"\",\n                      formUpdated: false,\n                      confirmDelete: false};\n    } \n\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\n    //the database and push them into the state.\n    async componentDidMount() {\n        if (!this.props.create) {\n            //obtain current user data from database and push into state\n            const url = \"/users/\" + this.props.userId;\n            const res = await fetch(url);\n            const json = await res.json();\n            const userData = JSON.parse(json);\n            this.origAccountInfo = userData; //This determines whether update can occur\n            this.origAccountInfo.passwordRepeat = userData.password;\n            this.setState({accountName: this.props.userId,\n                           displayName: userData.displayName,\n                           profilePicURL: userData.profilePicURL,\n                           password: userData.password,\n                           passwordRepeat: userData.password,\n                           securityQuestion: userData.securityQuestion,\n                           securityAnswer: userData.securityAnswer});\n        }\n    }\n\n    //checkDataValidity -- Callback function invoked after a form element in\n    //the 'Create Account' dialog box changes and component state has been\n    //updated. We first check whether the passwords match. If they do not, \n    //we set a custom validity message to be displayed when the user clicks the\n    //'Create Account' button. Otherwise, we reset the custom validity message\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\n    //Second, we check whether anything in the form changed from the original.\n    //If so, we update the 'formUpdated' state var, so that the form's submit\n    //button is enabled.\n    checkDataValidity = () => {\n        if (this.state.password != this.state.passwordRepeat) {\n            //Passwords don't match\n            this.repeatPassRef.current.setCustomValidity(\n            \"This password must match password entered in previous field.\");\n        } else {\n            this.repeatPassRef.current.setCustomValidity(\"\");\n        }\n    }\n\n    //handleChange--Called when a field in a dialog box form changes.\n    handleChange = (event) => {\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\n        if (event.target.name === \"profilePic\") {\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                               formUpdated: formUpdated},\n                               this.checkDataValidity);\n            } else { //The user selected a file\n                const self = this;\n                const reader = new FileReader();\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\n                reader.addEventListener(\"load\",function() {\n                    self.setState({profilePicURL:  this.result,\n                                   formUpdated: formUpdated},this.checkDataValidity);\n                });\n                \n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value,\n                           formUpdated: formUpdated},this.checkDataValidity);\n        }\n    } \n\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\n    //true since this.origAccountInfo is set to null.\n    //Should be called whenever the user makes a change to form data.\n    formIsUpdated = (updateField,updateVal) => {\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\n        if (updateField != \"displayName\" && \n             this.state.displayName != this.origAccountInfo.displayName) \n             {return true;}\n        if (updateField != \"profilePicURL\" && \n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \n             {return true;}\n        if (updateField != \"password\" &&\n            this.state.password !== this.origAccountInfo.password)\n            {return true;}\n        if (updateField != \"passwordRepeat\" &&\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\n            {return true;}\n        if (updateField != \"securityQuestion\" &&\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\n            {return true;}\n        if (updateField != \"securityAnswer\" &&\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\n            {return true;}\n        return false;\n    }\n\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\n    //Sets default value of display name to value entered into Email field \n    //as a courtesy.\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    //handleSubmit -- Triggered when user clicks on submit button to\n    //either create or edit account.\n    //Custom data checking ensures user account under this email does not \n    //already exist and that the rest of the info is valid. We create a new  \n    // object for user, save it to localStorage and take user to app's \n    //landing page. \n    handleSubmit = async(event) => {\n        event.preventDefault();\n        //Initialize user account\n        let userData = {\n            displayName: this.state.displayName,\n            password: this.state.password,\n            profilePicURL: this.state.profilePicURL,\n            securityQuestion: this.state.securityQuestion,\n            securityAnswer: this.state.securityAnswer\n        };\n        const url = '/users/' + this.state.accountName;\n        let res;\n        if (this.props.create) { //use POST route to create new user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'POST',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\n            } else { //Unsuccessful account creation\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        } else { //use PUT route to update existing user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'PUT',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"User Account Updated!\",false);\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        }\n    }\n\n    //deleteAccount -- Called after confirms account deletion. \n    //Uses DELETE server route to perform server deletion. \n    //Calls on done with status message and\n    //true if delete was succesful, false otherwise.\n    deleteAccount = async() => {\n       const url = '/users/' + this.state.accountName;\n       const res = await fetch(url, \n                    {method: 'DELETE'}); \n        if (res.status == 200) { //successful account deletion!\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\n        } else { //Unsuccessful account deletion\n            //Grab textual error message\n            const resText = await res.text();\n            this.props.done(resText,false);\n        }\n        this.setState({confirmDelete: false});\n    }\n\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\n    //button to indicate intention to delete account. Presents the Confirm\n    //Delete dialog box.\n    confirmDeleteAccount = (e) => {\n        e.preventDefault();\n        this.setState({confirmDelete: true});\n    }\n\n    render() {\n    return (  \n    <div className=\"modal\" role=\"dialog\">\n    <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n            <div className=\"modal-header\">\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\n              <button className=\"modal-close\" \n                       onClick={this.props.cancel}>\n                &times;</button>\n            </div>\n            <div className=\"modal-body\">\n            <form onSubmit={this.handleSubmit}>\n            <label>\n                Email: \n                <input  \n                autocomplete=\"off\"\n                disabled={!this.props.create}\n                className=\"form-control form-text form-center\"\n                name=\"accountName\"\n                type=\"email\"\n                size=\"35\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                ref={this.newUserRef}\n                value={this.state.accountName}\n                onChange={this.handleChange}\n                onBlur={this.setDefaultDisplayName}\n                />\n            </label>\n            <br/>\n            <label>\n                Password:\n                <input\n                autocomplete=\"off\"\n                className=\"form-control form-text form-center\"\n                name=\"password\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Enter Password\"\n                pattern=\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                required={true}\n                value={this.state.password}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Repeat Password:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"passwordRepeat\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Repeat Password\"\n                required={true}\n                ref={this.repeatPassRef}\n                value={this.state.passwordRepeat}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Display Name:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"displayName\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Display Name\"\n                required={true}\n                value={this.state.displayName}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Profile Picture:<br/>\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"profilePic\"\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg\" \n                ref={this.profilePicRef}\n                value={this.state.profilePic}\n                onChange={this.handleChange}\n                />\n                <img src={this.state.profilePicURL != \"\" ? \n                            this.state.profilePicURL :\n                            this.state.profilePicDataURL} \n                        height=\"60\" width=\"60\" \n                 />\n            </label> \n            <br/>\n            <label>\n                Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityQuestion\"\n                size=\"35\"\n                placeholder=\"Security Question\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityQuestion}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Answer to Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityAnswer\"\n                type=\"text\"\n                placeholder=\"Answer\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityAnswer}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            {!this.props.create ?  \n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\n                Delete Account...\n            </button> : null}\n            <br/><br/>\n            <button role=\"submit\" \n                disabled={!this.state.formUpdated}\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\n            </button>\n            </form>\n            </div>\n        </div>\n        {this.state.confirmDelete ? \n          <ConfirmDeleteAccount email={this.state.accountName}\n                                deleteAccount={this.deleteAccount}\n                                close={() => (this.setState({confirmDelete: false}))}\n         /> : null}\n    </div>\n    );\n}\n}\n\nexport default CreateEditAccountDialog;","import React from 'react'\n\nclass ResetPasswordDialog extends React.Component {\n    constructor() {\n        super();\n        this.resetPasswordRef = React.createRef();\n        this.resetPasswordRepeatRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\n    //If so, call on resetPassword in parent component to actually reset the password.\n    //Otherwise, display an error message prompting the user to try again.\n    handleSubmit= (event) => {\n        event.preventDefault();\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\n            this.props.resetPassword(this.resetPasswordRef.current.value);\n        } else {\n            this.resetPasswordRepeatRef.current.focus();\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\n        }\n    }\n\n    checkForSubmit = (e) => {\n        if (e.code === \"Enter\") {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                        className=\"form-control form-text\"\n                        ref={this.resetPasswordRef}\n                        />\n                    </label>\n                    <label>\n                        Repeat New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Repeat new password\"\n                        className=\"form-control form-text\"\n                        onKeyUp={this.checkForSubmit}\n                        ref={this.resetPasswordRepeatRef}\n                        />\n                    </label>\n                    <button role=\"submit\" \n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );\n        \n    }\n}\n\nexport default ResetPasswordDialog;","/* AppMode: The enumerated type for AppMode. */\n\nconst AppMode = {\n    LOGIN: \"LoginMode\",\n    FEED: \"FeedMode\",\n    ROUNDS: \"RoundsMode\",\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\n    COURSES: \"CoursesMode\"\n};\n\nObject.freeze(AppMode); //This ensures that the object is immutable.\n\nexport default AppMode;","import React from 'react';\nimport AppMode from '../AppMode.js';\n\nclass LookUpAccountDialog extends React.Component {\n\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\n    //button, we check whether the account exists. If it does, we update the state,\n    //setting the resetEmail var to the email entered, hiding the current dialog box\n    //and showing the security question dialog box.\n    handleLookUpAccount = async(event) => {\n        event.preventDefault();\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\n        if (response.status == 200) {\n            const json = await response.json();\n            const obj = JSON.parse(json);\n            if (obj.authStrategy === \"local\") {\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\n            } else { //Account exists but was created through OAuth so password can't be reset \n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\n            }\n        } else {\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\n                    <button className=\"modal-close\" \n                        onClick={() => {this.props.cancelResetPassword()}}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\n                    <form onSubmit={this.handleLookUpAccount}>\n                    <label>\n                        Account Email Address: \n                        <input\n                        ref={this.emailRef}\n                        className=\"form-control form-text\"\n                        type=\"email\"\n                        size=\"35\"\n                        placeholder=\"Enter Email Address\"\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                        ref={this.emailRef}\n                        required={true}\n                        />\n                    </label>\n                    <button type=\"submit\" \n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>  \n        );   \n    }\n\n}\n\nexport default LookUpAccountDialog;\n","import React from 'react';\n\nclass SecurityQuestionDialog extends React.Component {\n    constructor() {\n        super();\n        this.securityAnswerRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //Focus cursor in email secrity answer field when mounted\n    componentDidMount() {\n        this.securityAnswerRef.current.focus();\n    }  \n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.securityAnswerRef.current.value === this.props.answer) {\n            this.props.getNewPassword();\n        } else {\n            this.securityAnswerRef.current.focus();\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Security Question: \n                        <textarea\n                        readOnly={true}\n                        value={this.props.question}\n                        className=\"form-control form-text\"\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <label>\n                        Security Answer: \n                        <textarea\n                        className=\"form-control form-text\"\n                        placeholder=\"Enter Security Question Answer\"\n                        ref={this.securityAnswerRef}\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <button role=\"submit\" \n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );        \n    }\n}\n export default SecurityQuestionDialog;","import React from 'react';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\n\nclass LoginPage extends React.Component {\n\nconstructor() {\n    super();\n    //Create a ref for the email input DOM element\n    this.emailInputRef = React.createRef();\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.passwordInputRef = React.createRef();\n    this.state = {statusMsg: \"\",\n                  loginBtnIcon: \"fa fa-sign-in\",\n                  loginBtnLabel: \"Log In\",\n                  showLookUpAccountDialog: false,\n                  showSecurityQuestionDialog: false,\n                  showResetPaswordDialog: false,\n                  githubIcon: \"fa fa-github\",\n                  githubLabel: \"Sign in with GitHub\",\n                  loginMsg: \"\",\n                  newAccountCreated: false\n                  };\n} \n    \n//Focus cursor in email input field when mounted\ncomponentDidMount() {\n    this.emailInputRef.current.focus();\n}  \n\n//handleLoginSubmit -- Called when user clicks on login button.\nhandleLoginSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\n                   loginBtnLabel: \"Logging In...\"});\n    const url = \"/auth/login?username=\" + this.emailInputRef.current.value +\n                \"&password=\" + this.passwordInputRef.current.value;\n    const res = await fetch(url, {method: 'POST'}); \n    if (res.status == 200) { //successful login!\n        window.open(\"/\",\"_self\");\n    } else { //Unsuccessful login\n      const resText = await res.text();\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\n                     loginBtnLabel: \"Log In\",\n                     statusMsg: resText});\n    }\n}\n\n  //accountCreateDone -- Called by child CreateAccountDialog component when \n  //user attempted to create new account. Hide the dialog and display \n  //a message indicating result of the attempt.\n  accountCreateDone = (msg) => {\n      this.setState({statusMsg: msg,\n                     showCreateAccountDialog: false});\n  }\n\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\n  cancelCreateAccount = () => {\n      this.setState({showCreateAccountDialog: false});\n  }\n\n//cancelResetPassword -- Called by one of the child three child dialog box components when\n//the user decides to cancel resetting their password. Toggles state so that all three\n//of the dialog boxes are hidden\ncancelResetPassword = () => {\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: false,\n                   showResetPaswordDialog: false});             \n}\n\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\n//provider\nhandleOAuthLogin = (provider) => {\n    window.open(`/auth/${provider}`,\"_self\");\n}\n\n//handleOAuthLoginClick -- Called whent the user clicks on button to\n//authenticate via a third-party OAuth service. The name of the provider is\n//passed in as a parameter.\nhandleOAuthLoginClick = (provider) => {\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\n                  [provider + \"Label\"] : \"Connecting...\"});\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\n}\n\n//getSecurityAnswer: Given the id, security question, and security answer obtained\n//from the LookUpAccountDialog component, update state such that the user will\n//next be prompted to enter security question and answer for verification\ngetSecurityAnswer = (userId, question, answer) => {\n    this.resetUserId = userId;\n    this.resetQ = question;\n    this.resetA = answer;\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: true\n                });\n}\n\n//getNewPassword-- Called after user successfully provides correct answer\n//to security question. Presents the \"Reset Password\" dialog box.\ngetNewPassword = () => {\n    this.setState({showSecurityQuestionDialog: false,\n                    showResetPaswordDialog: true});\n}\n\n//resetPassword--Called after the user successfully enters a new (acceptable)\n//password. pw contains the new password. Call on the Update (PUT) server\n//route to update the user's password in the database.\nresetPassword = async(pw) => {\n    const url = \"/users/\" + this.resetUserId;\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n        method: 'PUT',\n        body: JSON.stringify({password: pw})}); \n    if (res.status == 200) { //successful update creation!\n        this.setState({showResetPaswordDialog: false,\n                       statusMsg: \"Password successfully reset!\"});\n    } else { //Unsuccessful account creation\n        //Grab textual error message\n        const resText = await res.text();\n        this.setState({showResetPasswordDialog: false,\n                      statusMsg: resText});\n    }\n    \n}\n\n//newAccountCreated -- Called after successful creation of a new account\naccountCreateDone = (msg,deleted) => {\n    this.setState({statusMsg: msg,\n                   showCreateAccountDialog: false});\n}\n\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\ncloseStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n}\n\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\ncancelCreateAccount = () => {\n    this.setState({showCreateAccountDialog: false});\n}\n\n  render() {\n    return(\n        <div>\n        <center>\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n            {this.state.showLookUpAccountDialog ? \n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\n            {this.state.showSecurityQuestionDialog ? \n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\n                                       question={this.resetQ}\n                                       answer={this.resetA}\n                                       getNewPassword={this.getNewPassword}/> : null}\n            {this.state.showResetPaswordDialog ? \n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\n                                   resetPassword={this.resetPassword} /> : null}\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\n                Email:\n                <input\n                ref={this.emailInputRef}\n                className=\"form-control login-text\"\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                id=\"emailInput\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                />\n            </label>\n            <p />\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\n                Password:\n                <input\n                ref={this.passwordInputRef}\n                className=\"form-control login-text\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\n                required={true}\n                />\n            </label>\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\n            <button\n                type=\"submit\"\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\n                &nbsp;{this.state.loginBtnLabel}\n            </button>\n            <p>\n            <button type=\"button\" className=\"btn btn-link login-link\" \n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\n                Create an account</button> | \n                <button type=\"button\" className=\"btn btn-link login-link\"\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\n                Reset your password</button>\n            </p>  \n            <button type=\"button\" className=\"btn btn-github\"\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\n              <span className={this.state.githubIcon}></span>&nbsp;\n                {this.state.githubLabel}\n            </button>\n            <p>\n                <i>Version CptS 489</i>\n            </p>\n            </form>\n            {this.state.showCreateAccountDialog ? \n              <CreateEditAccountDialog\n                create={true} \n                done={this.accountCreateDone}\n                cancel={this.cancelCreateAccount} /> : null}\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\n        </center>\n        </div>\n        )\n    }\n} \n\nexport default LoginPage;\n","import React from 'react';\n\nclass FeedPage extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 >Activity Feed</h1>\n            <h2>This page is under construction.</h2>\n            <img src={require('../images/WSU-logo.png')}\n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default FeedPage;","import React from 'react';\n\nclass ConfirmDeleteRound extends React.Component {\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete this round?</p>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\n                  Yes, Delete</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteRound;","import React from 'react';\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\nimport AppMode from '../AppMode.js';\n\nclass RoundsTable extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {showConfirmDelete: false};\n  }\n\n  //editRound -- Triggered when the user clicks the edit button for a given\n  //round. The id param is the unique property that identifies the round.\n  //Set the state variable representing the id of the round to be edited and\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\n  //chosen round.\n  editRound = (id) => {\n    this.props.setEditId(id);\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\n  }\n\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\n  //button in the Confirm Delete dialog box. It executes the deletion and\n  //closes the dialog box.\n  deleteRound = () => {\n    this.props.deleteRound();\n    this.setState({showConfirmDelete: false});\n  }\n\n\n  //confirmDelete -- Triggered when the user clicks the delete button\n  //for a given round. The id paam is the unique property that \n  //identifies the round. Set the state variable representing the id\n  //of the round to be deleted and then present a dialog box asking\n  //the user to confirm the deletion.\n  confirmDelete = (id) => {\n    this.props.setDeleteId(id);\n    this.setState({showConfirmDelete: true});\n  }\n\n\n  //renderTable -- render an HTML table displaying the rounds logged\n  //by the current user and providing buttons to view/edit and delete each round.\n  renderTable = () => {\n  let table = [];\n  for (let r = 0; r < this.props.rounds.length; ++r) {\n    table.push(\n      <tr key={r}>\n        <td>{this.props.rounds[r].courseId}</td>\n        <td>{this.props.rounds[r].courseName}</td>\n        <td>{this.props.rounds[r].preReqs}</td>\n        <td>{this.props.rounds[r].description}</td>\n        <td><button onClick={this.props.menuOpen ? null : () => \n          this.editRound(r)}>\n              <span className=\"fa fa-eye\"></span></button></td>\n        <td><button onClick={this.props.menuOpen ? null : \n          () => this.confirmDelete(r)}>\n              <span className=\"fa fa-trash\"></span></button></td>\n      </tr> \n    );\n  }\n  return table;\n  }\n\n  //render--render the entire rounds table with header, displaying a \"No\n  //Courses Logged\" message in case the table is empty.\n  render() {\n    return(\n    <div className=\"padded-page\">\n      <h1></h1>\n      <table className=\"table table-hover\">\n        <thead className=\"thead-light\">\n        <tr>\n          <th>Course ID</th>\n          <th>Course Name</th>\n          <th>Prerequisites</th>\n          <th>Description</th>\n          <th>View/Edit...</th>\n          <th>Delete</th>\n        </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.props.rounds).length === 0 ? \n          <tr>\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No courses logged</td>\n          </tr> : this.renderTable()\n          }\n        </tbody>\n      </table>\n      {this.state.showConfirmDelete ?\n        <ConfirmDeleteRound \n          close={() => this.setState({showConfirmDelete: false})} \n          deleteRound={this.deleteRound} /> : null}\n    </div>\n    );\n  }\n}\n\nexport default RoundsTable;\n","import React from 'react';\nimport AppMode from '../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n  super(props);\n  //Create date object for today, taking time zone into consideration\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n  //store date as ISO string\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n    //If logging a new round, the starting state is a default round with\n    //today's date.\n    this.state = {date:  today.toISOString().substr(0,10), \n                  course: \"\",\n                  type: \"practice\",\n                  holes: \"18\",\n                  strokes: 80,\n                  minutes: 50,\n                  seconds: \"00\",\n                  notes: \"\",\n                  faIcon: \"fa fa-save\",\n                  btnLabel: \"Save Round Data\"}\n  } else {\n    //if editing an existing round, the starting state is the round's\n    //current data\n    let thisRound = {...this.props.startData};\n    delete thisRound.id;\n    thisRound.faIcon = \"fa fa-edit\";\n    thisRound.btnLabel = \"Update Round Data\";\n    this.state = thisRound;\n  }\n}\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ?\n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;","import React from 'react';\n\nclass FloatingButton extends React.Component {\n    render() {\n      return(\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\n        </div>  \n      );\n    }\n}\n\nexport default FloatingButton;\n","//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from '../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.deleteId = \"\";\n        this.editId = \"\";\n        this.state = {errorMsg: \"\"};           \n    }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.setState({errorMsg: \"\"});\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.deleteId]._id;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \n            + msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }  \n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.deleteId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.editId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    closeErrorMsg = () => {\n        this.setState({errorMsg: \"\"});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n","import React from 'react';\n\nclass CoursesPage extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 >Courses</h1>\n            <h2>This page is under construction.</h2>\n            <img src={require('../images/WSU-logo.png')}\n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default CoursesPage;","import React from 'react';\n\nclass AboutBox extends React.Component {\n\nrender() {\n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h3>About SpeedScore</h3>\n                <button className=\"modal-close\" onClick={this.props.close}>\n                    &times;\n                </button>\n            </div>\n            <div className=\"modal-body\">\n                <img\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\n                height=\"200\" width=\"200\"/>\n                <h3>The World's First and Only Suite of Apps for\n                Speedgolf</h3>\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\n                &copy; 2017-20 The Professor of Speedgolf. All rights\n                reserved.\n                </p>\n                <div style={{textAlign: \"left\"}}>\n                <p>SpeedScore apps support</p>\n                <ul>\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\n                <li>tracking personal speedgolf rounds and sharing results\n                (<i>SpeedScore Track&reg;</i>)</li>\n                <li>finding speedgolf-friendly courses, booking tee times, and\n                paying to play speedgolf by the minute (<i>SpeedScore\n                Play&reg;</i>)</li>\n                </ul>\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\n                associate professor of computer science at Washington State\n                University and the <i>Professor of Speedgolf</i>, with support\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\n                <p>For more information on SpeedScore, visit <a\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\n                site</a>. For more information on speedgolf, visit <a\n                href=\"http://playspeedgolf.com\"\n                target=\"_blank\">playspeedgolf.com</a> and <a\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\n                USA</a>.</p>\n                </div>\n            </div>\n            <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.close}>OK</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default AboutBox;","import React from 'react';\nimport NavBar from './NavBar.js';\nimport SideMenu from './SideMenu.js';\nimport ModeBar from './ModeBar.js';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\nimport LoginPage from './LoginPage.js';\nimport AppMode from \"../AppMode.js\"\nimport FeedPage from './FeedPage.js';\nimport Rounds from './Rounds.js';\nimport CoursesPage from './CoursesPage.js';\nimport AboutBox from './AboutBox.js';\nimport {HashRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            mode: AppMode.LOGIN,\n            menuOpen: false,\n            authenticated: false,\n            userObj: {displayName: \"\", profilePicURL: \"\"},\n            editAccount: false,\n            showEditAccountDialog: false,\n            statusMsg: \"\",\n            showAboutDialog: false\n        };\n    }\n\n    //componentDidMount\n    componentDidMount() {\n        if (!this.state.authenticated) {\n            //Use /auth/test route to (re)-test authentication and obtain user data\n            fetch(\"/auth/test\")\n                .then((response) => response.json())\n                .then((obj) => {\n                        if (obj.isAuthenticated) {\n                            this.setState({\n                                userObj: obj.user,\n                                authenticated: true,\n                                mode: AppMode.FEED //We're authenticated so can get into the app.\n                            });\n                        }\n                    }\n                )\n        }\n    }\n\n    //refreshOnUpdate(newMode) -- Called by child components when user data changes in\n    //the database. The function calls the users/:userid (GET) route to update\n    //the userObj state var based on the latest database changes, and sets the\n    //mode state var is set to newMode. After this method is called, the\n    //App will re-render itself, forcing the new data to\n    //propagate to the child components when they are re-rendered.\n    refreshOnUpdate = async (newMode) => {\n        let response = await fetch(\"/users/\" + this.state.userObj.id);\n        response = await response.json();\n        const obj = JSON.parse(response);\n        this.setState({\n            userObj: obj,\n            mode: newMode\n        });\n    }\n\n\n    handleChangeMode = (newMode) => {\n        this.setState({mode: newMode});\n    }\n\n    openMenu = () => {\n        this.setState({menuOpen: true});\n    }\n\n    closeMenu = () => {\n        this.setState({menuOpen: false});\n    }\n\n    toggleMenuOpen = () => {\n        this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\n    }\n\n    showEditAccount = () => {\n        this.setState({showEditAccountDialog: true});\n\n    }\n\n    cancelEditAccount = () => {\n        this.setState({showEditAccountDialog: false});\n    }\n\n    //editAccountDone -- called after successful edit or\n    //deletion of user account. msg contains the status\n    //message and deleted indicates whether an account was\n    //edited (deleted == false) or deleted (deleted == true)\n    editAccountDone = (msg, deleted) => {\n        if (deleted) {\n            this.setState({\n                showEditAccountDialog: false,\n                statusMsg: msg,\n                mode: AppMode.LOGIN\n            });\n        } else {\n            this.setState({\n                showEditAccountDialog: false,\n                statusMsg: msg\n            });\n        }\n    }\n\n    closeStatusMsg = () => {\n        this.setState({statusMsg: \"\"});\n    }\n\n    logOut = () => {\n        this.setState({\n            userObj: {},\n            authenticated: false\n        })\n    }\n\n    render() {\n        return (\n            <Router>\n                {!this.state.authenticated ? <Redirect to=\"/login\"/> : null}\n                <div className=\"padded-page\">\n                    {this.state.showAboutDialog ?\n                        <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\n                    {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\n                        <span>{this.state.statusMsg}</span>\n                        <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                            <span className=\"fa fa-times\"></span></button>\n                    </div> : null}\n                    {this.state.showEditAccountDialog ?\n                        <CreateEditAccountDialog\n                            create={false}\n                            userId={this.state.userObj.id}\n                            done={this.editAccountDone}\n                            cancel={this.cancelEditAccount}/> : null}\n                    <NavBar\n                        menuOpen={this.state.menuOpen}\n                        toggleMenuOpen={this.toggleMenuOpen}/>\n                    <SideMenu\n                        menuOpen={this.state.menuOpen}\n                        toggleMenuOpen={this.toggleMenuOpen}\n                        displayName={this.state.userObj.displayName}\n                        profilePicURL={this.state.userObj.profilePicURL}\n                        localAccount={this.state.userObj.authStrategy === \"local\"}\n                        editAccount={this.showEditAccount}\n                        logOut={() => this.logOut()}\n                        showAbout={() => {\n                            this.setState({showAboutDialog: true})\n                        }}/>\n\n                    <Switch>\n                        <Route path=\"/login\">\n                            <LoginPage/>\n                        </Route>\n                        <Route path=\"/\">\n                            <Switch>\n                                <ModeBar menuOpen={this.state.menuOpen}/>\n                                <Route path=\"/feed\">\n                                    <FeedPage/>\n                                </Route>\n                                <Route path=\"/rounds\">\n                                    <Rounds/>\n                                </Route>\n                                <Route path=\"/courses\">\n                                    <CoursesPage/>\n                                </Route>\n                            </Switch>\n                        </Route>\n                    </Switch>\n\n                    {/*<ModePage*/}\n                    {/*    menuOpen={this.state.menuOpen}*/}\n                    {/*    mode={this.state.mode}*/}\n                    {/*    changeMode={this.handleChangeMode}*/}\n                    {/*    userObj={this.state.userObj}*/}\n                    {/*    refreshOnUpdate={this.refreshOnUpdate}/>*/}\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles/index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}